$('.adventures-command-container').fadeIn();
$('#timer-box').fadeIn();

// 以下タイマー機能
// タイマー機能に必要な変数,定数を用意
const elmMin = document.querySelector(".min");
const elmSec = document.querySelector(".sec");
var quest_finished = false;
let startTime = new Date('<%= @quest.start_time.iso8601 %>'); //クエストを始めた時間
let finish = <%= @quest.set_seconds - @study_time %>; // クエスト時間

function countdown() {
  const nowTime = new Date(); // 現在時刻を取得
  let finishTime = new Date(startTime.getTime() + finish * 1000 ); //クエスト終了時刻をセット
  let diff = finishTime.getTime() - nowTime.getTime(); // 時間の差を取得（ミリ秒）

  // ミリ秒から単位を修正
  const calcMin = Math.floor(diff / 1000 / 60) % 60;
  const calcSec = Math.floor(diff / 1000) % 60;

  // 取得した時間を表示（2桁表示）
  elmMin.textContent = String(calcMin).padStart(2, "0");
  elmSec.textContent = String(calcSec).padStart(2, "0");

  // 終了時刻との差が0.001秒より小さい場合
  if (diff < 1 ) {
    clearInterval(timerId);
    document.querySelector(".timer-text").textContent = String("おつかれさまでした！");
    quest_finished = true
  }
};

countdown();
let timerId = setInterval(countdown, 1000);

// 以下アドベンチャー機能
// アニメーションに必要な変数を代入
let avatarSource = "<%= raw @avatar_source %>";
let enemyId = 0;
const enemySources = <%= raw @enemy_animation_sources %>;
const enemyCount = <%= @enemies.count %>;

// エンカウント機能
function encount() {
  console.log(enemySources)
  let timestamp = new Date().getTime();

  // ランダムエンカウントするエネミーを決定
  enemyId = Math.floor( Math.random() * enemyCount ) + 1;
  let enemyDamagedImage =  enemySources[enemyId - 1];

  // gifアニメの繰り返し再生の準備
  $('#avatar-attack').attr("src", avatarSource + '?' + timestamp);
  $(`#enemy-damaged-${enemyId}`).attr("src", enemyDamagedImage + '?' + timestamp);

  //画面フェードアウト
  return new Promise((resolve, reject) => {
    $('.animation-field').fadeOut()
    resolve();
  })

  // map,avatar,enemyの表示切替
  .then(() => {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        $('#map-img').removeClass("d-none");
        $('#avatar-standing').removeClass("d-none")

        $('#map-gif').addClass("d-none");
        $('#avatar-running').addClass("d-none");

        $(`#enemy-standing-${enemyId}`).removeClass("d-none");
        resolve();
      }, 600)
    })
  })

  // 画面フェードイン
  .then(() => {
    return new Promise((resolve, reject) => {
      $('.animation-field').fadeIn();
      resolve();
    })
  })

  // avatar-attackを表示し再生
  .then(() => {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        $('#avatar-attack').removeClass("d-none");
        resolve();
      }, 3000)
    })
  })

  // avatar-standingを非表示
  .then(() => {
    return new Promise((resolve, reject) => {
      $('#avatar-standing').addClass("d-none");
      resolve();
    })
  })

  // enemy-damagedをd-noneで非表示のまま、cssのdisplay-noneを外す
  .then(() => {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        $(`#enemy-damaged-${enemyId}`).fadeIn(0);
        $(`#enemy-damaged-${enemyId}`).removeClass("d-none");
        resolve();
      }, 1100)
    })
  })

  // enemy-standingを非表示
  .then(() => {
    return new Promise((resolve, reject) => {
      $(`#enemy-standing-${enemyId}`).addClass("d-none");
      resolve();
    })
  })

  // enemy-damagedをフェードアウト
  .then(() => {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        $(`#enemy-damaged-${enemyId}`).fadeOut();
        resolve();
      }, 1000)
    })
  })

  // 画面フェードアウト
  .then(() => {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        $('.animation-field').fadeOut();
        resolve();
      }, 1000)
    })
  })

  // map,avatar,enemyの表示切替
  .then(() => {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        $(`#enemy-damaged-${enemyId}`).addClass("d-none");
        $('#map-img').addClass("d-none");
        $('#avatar-attack').addClass("d-none")

        $('#map-gif').removeClass("d-none");
        $('#avatar-running').removeClass("d-none");

        resolve();
      }, 600)
    })
  })

  // 画面フェードイン
  .then(() => {
    return new Promise((resolve, reject) => {
      $('.animation-field').fadeIn();
    })
  })
};

let encountId = setInterval(encount, 30000);